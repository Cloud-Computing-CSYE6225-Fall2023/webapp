name: Packer Build

on:
  pull_request:
    branches:
      - main

jobs:
  setup-go:
    if: github.event.pull_request.head.repo.fork
    name: setup-go
    runs-on: ubuntu-20.04
    env:
      PORT: ${{ vars.PORT }}
      DB_USER: ${{ vars.DB_USER }}
      DB_PASS: ${{ vars.DB_PASS }}
      DB_HOST: ${{ vars.DB_HOST }}
      DB_PORT: ${{ vars.DB_PORT }}
      DB_NAME: ${{ vars.DB_NAME }}
      DRIVER_NAME: ${{ vars.DRIVER_NAME }}
      USER_DATA_FILE_PATH: ${{ vars.USER_DATA_FILE_PATH }}
      MIGRATION_FILE_PATH: ${{ vars.MIGRATION_FILE_PATH }}
      LOG_FILE_PATH: ${{ vars.LOG_FILE_PATH }}

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_DB: ${{ vars.POSTGRES_DB }}
          POSTGRES_PASSWORD: ${{ vars.POSTGRES_PASSWORD }}
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Set up Go 1.21.1
        id: go
        uses: actions/setup-go@v4
        with:
          go-version: 1.21.1

      - name: Check out code
        uses: actions/checkout@v3

      - name: Install Dependencies
        run: |
          go get -v ./...

      - name: Integration Tests
        run: |
          go test -v ./...

      #      - name: Create environment file
      #        run: |
      #          touch .env
      #          echo "export PORT=$PORT" >> .env
      #          echo "export DB_USER=$DB_USER" >> .env
      #          echo "export DB_PASS=$DB_PASS" >> .env
      #          echo "export DB_HOST=$DB_HOST" >> .env
      #          echo "export DB_PORT=$DB_PORT" >> .env
      #          echo "export DB_NAME=$DB_NAME" >> .env
      #          echo "export DRIVER_NAME=$DRIVER_NAME" >> .env
      #          echo "export USER_DATA_FILE_PATH=$USER_DATA_FILE_PATH" >> .env
      #          echo "export MIGRATION_FILE_PATH=$MIGRATION_FILE_PATH" >> .env

      - name: Build Go Application
        run: |
          sudo apt-get update
          sudo apt-get upgrade -y
          sudo apt install build-essential -y
          sudo apt-get clean
          
          go version
          
          GOARCH=amd64 GOOS=linux go build -tags musl -o webapp

      - name: Zip Dependencies
        run: |
          zip -r webapp.zip migrations opt startup-scripts webapp observability-config.json

#      - name: Install Packer
#        run: |
#          curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
#          sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
#          sudo apt-get update && sudo apt-get install packer
#
#      - name: Packer Init
#        if: success()
#        run: |
#          cd ami
#          packer init .
#
#      - name: Packer Build
#        if: success()
#        env:
#          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          PKR_VAR_subnet_id: ${{ secrets.AWS_DEFAULT_DEV_SUBNET_ID }}
#          PKR_VAR_db_name: ${{ secrets.PCKR_DB_NAME }}
#          PKR_VAR_owners: ${{ vars.PKR_VAR_owners }}
#          PKR_VAR_db_user: ${{ secrets.PCKR_DB_USER }}
#          PKR_VAR_db_password: ${{ secrets.PCKR_DB_PASSWORD }}
#          PKR_VAR_ssh_username: ${{ secrets.AWS_SSH_USER }}
#          PKR_VAR_ami_users: ${{ vars.AWS_DEMO_ACCOUNT_ID }}
#          PKR_VAR_aws_region: ${{ vars.AWS_REGION }}
#          PKR_VAR_source_ami: ${{ vars.AWS_SOURCE_AMI }}
#          PKR_VAR_device_name: ${{ vars.EC2_DEVICE_NAME }}
#          PKR_VAR_instance_type: ${{ vars.EC2_INSTANCE_TYPE }}
#          PKR_VAR_volume_size: ${{ vars.EC2_VOLUME_SIZE }}
#          PKR_VAR_volume_type: ${{ vars.EC2_VOLUME_TYPE }}
#        run: |
#          cd ami
#          packer build ami.us-east-1.pkr.hcl

#      - name: Fetch latest AMI
#        id: ami
#        run: |
#          latest_ami_id=$(aws ec2 describe-images --owners self --query 'Images | sort_by(@, &CreationDate) | [-1].ImageId' --output text)
#          echo "Latest AMI ID: $latest_ami"
#          echo "latest_ami_id=$latest_ami_id" >> $GITHUB_ENV

  dev-deployment:
    needs: setup-go
    runs-on: ubuntu-20.04
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.DEV_AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.DEV_AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: ${{ vars.AWS_REGION }}
    steps:
      - name: Fetch latest AMI
        id: ami
        run: |
          latest_ami_id=$(aws ec2 describe-images --owners self --query 'Images | sort_by(@, &CreationDate) | [-1].ImageId' --output text)
          echo "Latest AMI ID: $latest_ami_id"
          echo "latest_ami_id=$latest_ami_id" >> $GITHUB_ENV

      - name: Retrieve Existing Launch Template Configuration
        shell: bash
        run: |
          launch_template_name="${{ vars.LAUNCH_TEMPLATE_NAME }}"
          aws ec2 describe-launch-template-versions \
            --launch-template-name $launch_template_name \
            --output json \
            --query "LaunchTemplateVersions[0].LaunchTemplateData" \
            > launch_template_data.json

      - name: Print Retrieved Launch Template JSON
        run: cat launch_template_data.json

      - name: Install jq
        run: sudo apt-get install jq

      - name: Replace AMI ID in Launch Template JSON
        run: |
          jq --arg ami_id "$latest_ami_id" \
            '.ImageId |= $ami_id' launch_template_data.json > updated_launch_template.json

      - name: Print Updated Launch Template JSON
        run: cat updated_launch_template.json

      - name: Create Launch Template Version
        run: |
          launch_template_name="${{ vars.LAUNCH_TEMPLATE_NAME }}"
          aws ec2 create-launch-template-version \
            --launch-template-name $launch_template_name \
            --launch-template-data file://updated_launch_template.json
        shell: bash

      - name: Query Launch Template Versions
        run: |
          launch_template_name="${{ vars.WEBAPP_PROJECT_NAME }}-${{ vars.WEBAPP_ACCOUNT }}-lt"
          versions=$(aws ec2 describe-launch-template-versions \
            --launch-template-name $launch_template_name \
            --output json \
            --query "LaunchTemplateVersions[].VersionNumber")
          latest_version=$(echo $versions | jq -r '.[0]')
          echo "Latest Launch Template Version: $latest_version"
          echo "::set-output name=latest_version::$latest_version"
        id: template

      - name: Set Latest Launch Template Version as Default
        run: |
          launch_template_name="${{ vars.LAUNCH_TEMPLATE_NAME }}"
          aws ec2 modify-launch-template \
            --launch-template-name $launch_template_name \
            --default-version ${{ steps.template.outputs.latest_version }} \
            --output json

      - name: Start Auto Scaling Group Instance Refresh
        run: |
          asg_name="${{ vars.AUTO_SCALING_GROUP_NAME }}"
          instance_refresh_command_output=$(aws autoscaling start-instance-refresh \
            --auto-scaling-group-name $asg_name \
            --preferences MinHealthyPercentage=100 \
            --output json)
          instance_refresh_id=$(echo $instance_refresh_command_output | jq -r '.InstanceRefreshId')
          echo "Instance Refresh ID: $instance_refresh_id"
          echo "::set-output name=instance_refresh_id::$instance_refresh_id"
        shell: bash
        id: instance_refresh

      - name: Wait for Instance Refresh to Complete
        run: |
          instance_refresh_id="${{ steps.instance_refresh.outputs.instance_refresh_id }}"
          asg_name="${{ vars.AUTO_SCALING_GROUP_NAME }}"
          
          # Check the status of the instance refresh in a loop
          while true; do
            instance_refresh_status=$(aws autoscaling describe-instance-refreshes \
              --auto-scaling-group-name $asg_name \
              --instance-refresh-ids $instance_refresh_id \
              --query 'InstanceRefreshes[0].Status' \
              --output json)
          
            echo "Instance Refresh Status: $instance_refresh_status"
          
            if [ "$instance_refresh_status" == '"Successful"' ]; then
              echo "Instance Refresh completed successfully."
              break
            elif [ "$instance_refresh_status" == '"Cancelled"' ] || [ "$instance_refresh_status" == '"Failed"' ]; then
              echo "Instance Refresh failed or was cancelled."
              exit 1
            else
              echo "Waiting for Instance Refresh to complete..."
              sleep 30  # Adjust the sleep interval as needed
            fi
          done

  demo-deployment:
    needs: setup-go
    runs-on: ubuntu-20.04
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.DEMO_AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.DEMO_AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: ${{ vars.AWS_REGION }}
    steps:
      - name: Retrieve Existing Launch Template Configuration
        run: |
          launch_template_name="${{ vars.LAUNCH_TEMPLATE_NAME }}"
          aws ec2 describe-launch-template-versions \
            --launch-template-name $launch_template_name \
            --output json \
            --query "LaunchTemplateVersions[0].LaunchTemplateData" \
            > launch_template_data.json
        shell: bash

      - name: Print Retrieved Launch Template JSON
        run: cat launch_template_data.json

      - name: Install jq
        run: sudo apt-get install jq

      - name: Replace AMI ID in Launch Template JSON
        run: |
          jq --arg ami_id "$latest_ami_id" \
            '.ImageId |= $ami_id' launch_template_data.json > updated_launch_template.json

      - name: Print Updated Launch Template JSON
        run: cat updated_launch_template.json

      - name: Create Launch Template Version
        run: |
          launch_template_name="${{ vars.LAUNCH_TEMPLATE_NAME }}"
          aws ec2 create-launch-template-version \
            --launch-template-name $launch_template_name \
            --launch-template-data file://updated_launch_template.json
        shell: bash

      - name: Query Launch Template Versions
        run: |
          launch_template_name="${{ vars.WEBAPP_PROJECT_NAME }}-${{ vars.WEBAPP_ACCOUNT }}-lt"
          versions=$(aws ec2 describe-launch-template-versions \
            --launch-template-name $launch_template_name \
            --output json \
            --query "LaunchTemplateVersions[].VersionNumber")
          latest_version=$(echo $versions | jq -r '.[0]')
          echo "Latest Launch Template Version: $latest_version"
          echo "::set-output name=latest_version::$latest_version"
        id: template

      - name: Set Latest Launch Template Version as Default
        run: |
          launch_template_name="${{ vars.LAUNCH_TEMPLATE_NAME }}"
          aws ec2 modify-launch-template \
            --launch-template-name $launch_template_name \
            --default-version ${{ steps.template.outputs.latest_version }} \
            --output json

      - name: Start Auto Scaling Group Instance Refresh
        run: |
          asg_name="${{ vars.AUTO_SCALING_GROUP_NAME }}"
          instance_refresh_command_output=$(aws autoscaling start-instance-refresh \
            --auto-scaling-group-name $asg_name \
            --preferences MinHealthyPercentage=100 \
            --output json)
          instance_refresh_id=$(echo $instance_refresh_command_output | jq -r '.InstanceRefreshId')
          echo "Instance Refresh ID: $instance_refresh_id"
          echo "::set-output name=instance_refresh_id::$instance_refresh_id"
        shell: bash
        id: instance_refresh

      - name: Wait for Instance Refresh to Complete
        run: |
          instance_refresh_id="${{ steps.instance_refresh.outputs.instance_refresh_id }}"
          asg_name="${{ vars.AUTO_SCALING_GROUP_NAME }}"

          # Check the status of the instance refresh in a loop
          while true; do
            instance_refresh_status=$(aws autoscaling describe-instance-refreshes \
              --auto-scaling-group-name $asg_name \
              --instance-refresh-ids $instance_refresh_id \
              --query 'InstanceRefreshes[0].Status' \
              --output json)

            echo "Instance Refresh Status: $instance_refresh_status"

            if [ "$instance_refresh_status" == '"Successful"' ]; then
              echo "Instance Refresh completed successfully."
              break
            elif [ "$instance_refresh_status" == '"Cancelled"' ] || [ "$instance_refresh_status" == '"Failed"' ]; then
              echo "Instance Refresh failed or was cancelled."
              exit 1
            else
              echo "Waiting for Instance Refresh to complete..."
              sleep 30  # Adjust the sleep interval as needed
            fi
          done

