name: webapp-packer-validation-on-merge

on:
  pull_request:
    branches:
      - main
    types:
      - closed

jobs:
  setup-go:
    if: github.event.pull_request.merged == true
    name: setup-go
    runs-on: ubuntu-latest
    env:
      SERV_ADDR: "localhost"
      PORT: 8080
      POSTGRESQL_CONNECTION_STRING: "postgres://postgres:mysecretpassword@localhost:5432/assignments_submission?sslmode=disable"
      DB_NAME: "assignments_submission"
      DRIVER_NAME: "postgres"
      USER_DATA_FILE_PATH: "./opt/users.csv"
      MIGRATION_FILE_PATH: "file://./migrations/"

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_DB: "assignments_submission"
          POSTGRES_PASSWORD: "mysecretpassword"
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Set up Go 1.21.1
        id: go
        uses: actions/setup-go@v4
        with:
          go-version: 1.21.1

      - name: Check out code
        uses: actions/checkout@v3

      - name: Install Packer
        run: |
          wget https://releases.hashicorp.com/packer/1.7.5/packer_1.7.5_linux_amd64.zip
          unzip packer_1.7.5_linux_amd64.zip
          sudo mv packer /usr/local/bin/

      - name: Build Go Application
        run: |
          go build -o webapp

      - name: Zip Dependencies
        run: |
          zip -r webapp.zip ami migrations opt startup-scripts .env go.mod webapp

      - name: Packer Build
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_SSH_USER: ${{ secrets.AWS_SSH_USER }}
          AWS_DEFAULT_DEV_SUBNET_ID: ${{ secrets.AWS_DEFAULT_DEV_SUBNET_ID }}
          PCKR_DB_NAME: ${{ secrets.PCKR_DB_NAME }}
          PCKR_DB_USER: ${{ secrets.PCKR_DB_USER }}
          PCKR_DB_PASSWORD: ${{ secrets.PCKR_DB_PASSWORD }}
          AWS_DEMO_ACCOUNT_ID: ${{ vars.AWS_DEMO_ACCOUNT_ID }}
          AWS_REGION: ${{ vars.AWS_REGION }}
          AWS_SOURCE_AMI: ${{ vars.AWS_SOURCE_AMI }}
          EC2_DEVICE_NAME: ${{ vars.EC2_DEVICE_NAME }}
          EC2_INSTANCE_TYPE: ${{ vars.EC2_INSTANCE_TYPE }}
          EC2_VOLUME_SIZE: ${{ vars.EC2_VOLUME_SIZE }}
          EC2_VOLUME_TYPE: ${{ vars.EC2_VOLUME_TYPE }}
        run: |
          cd ami
          packer build -var 'aws_region'=$AWS_REGION \
          -var 'source_ami'=$AWS_SOURCE_AMI \
          -var 'access_key_id'=$AWS_ACCESS_KEY_ID \
          -var 'secret_access_key'=$AWS_SECRET_ACCESS_KEY \
          -var 'ssh_username'=$AWS_SSH_USER \
          -var 'subnet_id'=$AWS_DEFAULT_DEV_SUBNET_ID \
          -var 'PCKR_DB_USER'=$PCKR_DB_USER \
          -var 'PCKR_DB_PASSWORD'=$PCKR_DB_PASSWORD \
          -var 'PCKR_DB_NAME'=$PCKR_DB_NAME \
          -var 'instance_type'=$EC2_INSTANCE_TYPE \
          -var 'ami_users'=$AWS_DEMO_ACCOUNT_ID \
          -var 'device_name'=$EC2_DEVICE_NAME \
          -var 'volume_size'=$EC2_VOLUME_SIZE \
          -var 'volume_type'=$EC2_VOLUME_TYPE ami.us-east-1.pkr.hcl
